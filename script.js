// Tab Navigation
document.querySelectorAll('.nav-tab').forEach(tab => {
  tab.addEventListener('click', () => {
    const targetTab = tab.dataset.tab;
    
    // Update active tab
    document.querySelectorAll('.nav-tab').forEach(t => t.classList.remove('active'));
    tab.classList.add('active');
    
    // Update active panel
    document.querySelectorAll('.panel').forEach(p => p.classList.remove('active'));
    document.getElementById(targetTab).classList.add('active');
  });
});

// Resonator Calculator
class ResonatorCalculator {
  constructor() {
    this.resonators = {
      powerful: { cost: 3750, name: '–ú–æ—â–Ω—ã–π —Ä–µ–∑–æ–Ω–∞—Ç–æ—Ä' },
      active: { cost: 750, name: '–ê–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∑–æ–Ω–∞—Ç–æ—Ä' },
      simple: { cost: 300, name: '–ü—Ä–æ—Å—Ç–æ–π —Ä–µ–∑–æ–Ω–∞—Ç–æ—Ä' }
    };
    
    this.init();
  }
  
  init() {
    const inputs = ['azuriteAmount', 'powerfulPrice', 'activePrice', 'simplePrice'];
    inputs.forEach(id => {
      const element = document.getElementById(id);
      element.addEventListener('input', () => this.calculate());
      element.addEventListener('keyup', () => this.calculate());
    });
  }
  
  calculate() {
    const azurite = parseInt(document.getElementById('azuriteAmount').value) || 0;
    const prices = {
      powerful: parseFloat(document.getElementById('powerfulPrice').value) || 0,
      active: parseFloat(document.getElementById('activePrice').value) || 0,
      simple: parseFloat(document.getElementById('simplePrice').value) || 0
    };
    
    if (azurite <= 0 || Object.values(prices).every(p => p <= 0)) {
      this.showInitialState();
      return;
    }
    
    const results = this.calculateStrategies(azurite, prices);
    this.renderResults(results);
  }
  
  calculateStrategies(azurite, prices) {
    const strategies = [];
    
    // Single resonator strategies
    Object.keys(this.resonators).forEach(key => {
      if (prices[key] > 0) {
        const resonator = this.resonators[key];
        const quantity = Math.floor(azurite / resonator.cost);
        const profit = quantity * prices[key];
        
        strategies.push({
          type: key,
          name: resonator.name,
          quantity,
          profit: profit,
          details: `${quantity.toLocaleString()} —à—Ç √ó ${prices[key].toFixed(1)} —Ö–∞–æ—Å`
        });
      }
    });
    
    // Combo strategy (Active + Simple)
    if (prices.active > 0 && prices.simple > 0) {
      const maxActive = Math.floor(azurite / this.resonators.active.cost);
      const remaining = azurite - (maxActive * this.resonators.active.cost);
      const maxSimple = Math.floor(remaining / this.resonators.simple.cost);
      const comboProfit = (maxActive * prices.active) + (maxSimple * prices.simple);
      
      strategies.push({
        type: 'combo',
        name: '–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è',
        quantity: maxActive + maxSimple,
        profit: comboProfit,
        details: `${maxActive.toLocaleString()} –∞–∫—Ç. + ${maxSimple.toLocaleString()} –ø—Ä–æ—Å—Ç.`
      });
    }
    
    if (strategies.length === 0) {
      this.showInitialState();
      return [];
    }
    
    // Find best strategy
    const bestStrategy = strategies.reduce((best, current) => 
      current.profit > best.profit ? current : best
    );
    
    return strategies.map(s => ({
      ...s,
      isBest: s === bestStrategy
    }));
  }
  
  renderResults(strategies) {
    const container = document.getElementById('calculatorResults');
    
    if (strategies.length === 0) {
      this.showInitialState();
      return;
    }
    
    const html = strategies.map(strategy => {
      let detailsHtml = '';
      if (strategy.type === 'combo') {
        detailsHtml = `
          <div class="result-row">
            <span class="result-label">–°–æ—Å—Ç–∞–≤:</span>
            <span class="result-value">${strategy.details}</span>
          </div>
        `;
      } else {
        detailsHtml = `
          <div class="result-row">
            <span class="result-label">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</span>
            <span class="result-value">${strategy.quantity.toLocaleString()} —à—Ç</span>
          </div>
        `;
      }
      
      return `
        <div class="result-card ${strategy.isBest ? 'best' : ''}">
          <div class="result-title">
            ${strategy.isBest ? 'üëë ' : strategy.type === 'combo' ? 'üîÑ ' : 'üîÆ '}${strategy.name}
          </div>
          ${detailsHtml}
          <div class="result-row total">
            <span class="result-label">–û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å:</span>
            <span class="result-value">${strategy.profit.toFixed(2)} —Ö–∞–æ—Å</span>
          </div>
        </div>
      `;
    }).join('');
    
    container.innerHTML = html;
  }
  
  showInitialState() {
    const container = document.getElementById('calculatorResults');
    container.innerHTML = `
      <div class="result-card">
        <div class="result-title">üìä –ì–æ—Ç–æ–≤ –∫ —Ä–∞—Å—á—ë—Ç—É</div>
        <p class="text-center status-neutral">–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∑—É—Ä–∏—Ç–∞ –∏ —Ü–µ–Ω—ã —Ä–µ–∑–æ–Ω–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏</p>
      </div>
    `;
  }
}

// Fossil Market Data
class FossilMarket {
  constructor() {
    this.FOSSIL_BIOME_RU = {
      "Hollow Fossil": "üï≥Ô∏è –ì–ª—É–±–∏–Ω—ã –ë–µ–∑–¥–Ω—ã",
      "Bound Fossil": "üï≥Ô∏èüå≥ –û–∫–∞–º–µ–Ω–µ–≤—à–∏–π –ª–µ—Å / –ì–ª—É–±–∏–Ω—ã –ë–µ–∑–¥–Ω—ã",
      "Jagged Fossil": "üå≥ –û–∫–∞–º–µ–Ω–µ–≤—à–∏–π –ª–µ—Å",
      "Dense Fossil": "üçÑ –ì—Ä–∏–±–Ω—ã–µ –ø–µ—â–µ—Ä—ã",
      "Aberrant Fossil": "üçÑüï≥Ô∏è –ì—Ä–∏–±–Ω—ã–µ –ø–µ—â–µ—Ä—ã / –ì–ª—É–±–∏–Ω—ã –ë–µ–∑–¥–Ω—ã",
      "Pristine Fossil": "‚õèÔ∏èüî• –®–∞—Ö—Ç—ã / –ú–∞–≥–º–æ–≤—ã–π —Ä–∞–∑–ª–æ–º",
      "Metallic Fossil": "‚õèÔ∏è –®–∞—Ö—Ç—ã",
      "Serrated Fossil": "‚õèÔ∏è‚ùÑÔ∏è –®–∞—Ö—Ç—ã / –ú—ë—Ä–∑–ª–∞—è –ø–æ–ª–æ—Å—Ç—å",
      "Aetheric Fossil": "‚õèÔ∏è‚ô®Ô∏è –®–∞—Ö—Ç—ã / –°–µ—Ä–Ω—ã–µ –≤—ã—Ö–æ–¥—ã",
      "Frigid Fossil": "‚ùÑÔ∏è –ú—ë—Ä–∑–ª–∞—è –ø–æ–ª–æ—Å—Ç—å",
      "Prismatic Fossil": "‚ùÑÔ∏èüî• –ú—ë—Ä–∑–ª–∞—è –ø–æ–ª–æ—Å—Ç—å / –ú–∞–≥–º–æ–≤—ã–π —Ä–∞–∑–ª–æ–º",
      "Scorched Fossil": "üî• –ú–∞–≥–º–æ–≤—ã–π —Ä–∞–∑–ª–æ–º",
      "Deft Fossil": "üî• –ú–∞–≥–º–æ–≤—ã–π —Ä–∞–∑–ª–æ–º",
      "Fundamental Fossil": "üî•‚ô®Ô∏è –ú–∞–≥–º–æ–≤—ã–π —Ä–∞–∑–ª–æ–º / –°–µ—Ä–Ω—ã–µ –≤—ã—Ö–æ–¥—ã",
      "Lucent Fossil": "üï≥Ô∏è –ì–ª—É–±–∏–Ω—ã –ë–µ–∑–¥–Ω—ã",
      "Perfect Fossil": "üçÑ‚ô®Ô∏è –ì—Ä–∏–±–Ω—ã–µ –ø–µ—â–µ—Ä—ã / –°–µ—Ä–Ω—ã–µ –≤—ã—Ö–æ–¥—ã",
      "Corroded Fossil": "üçÑüå≥ –ì—Ä–∏–±–Ω—ã–µ –ø–µ—â–µ—Ä—ã / –û–∫–∞–º–µ–Ω–µ–≤—à–∏–π –ª–µ—Å",
      "Gilded Fossil": "üçÑüï≥Ô∏è –ì—Ä–∏–±–Ω—ã–µ –ø–µ—â–µ—Ä—ã / –ì–ª—É–±–∏–Ω—ã –ë–µ–∑–¥–Ω—ã",
      "Encrusted Fossil": "üî• –ú–∞–≥–º–æ–≤—ã–π —Ä–∞–∑–ª–æ–º",
      "Sanctified Fossil": "üçÑ –ì—Ä–∏–±–Ω—ã–µ –ø–µ—â–µ—Ä—ã",
      "Tangled Fossil": "‚õèÔ∏è –®–∞—Ö—Ç—ã",
      "Glyphic Fossil": "‚è≥ –ó–∞—Ç–µ—Ä—è–Ω–Ω–∞—è –≤–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–µ—â–µ—Ä–∞",
      "Volatile Fossil": "üåã –†–∞—Å–ø–ª–∞–≤–ª–µ–Ω–Ω–∞—è –ø–æ–ª–æ—Å—Ç—å",
      "Shuddering Fossil": "üíß –û—Ç—Å—ã—Ä–µ–≤—à–∞—è —Ç—Ä–µ—â–∏–Ω–∞",
      "Bloodstained Fossil": "üåã –†–∞—Å–ø–ª–∞–≤–ª–µ–Ω–Ω–∞—è –ø–æ–ª–æ—Å—Ç—å",
      "Fractured Fossil": "üå≥ –û–∫–∞–º–µ–Ω–µ–≤—à–∏–π –ª–µ—Å"
    };

    // --- –î–û–ë–ê–í–õ–ï–ù –ù–û–í–´–ô –û–ë–™–ï–ö–¢ –î–õ–Ø –ü–ï–†–ï–í–û–î–ê –ù–ê–ó–í–ê–ù–ò–ô ---
    this.FOSSIL_RU_NAMES = {
      "Hollow Fossil": "–ü—É—Å—Ç–æ—Ç–Ω–æ–µ –∏—Å–∫–æ–ø–∞–µ–º–æ–µ",
      "Bound Fossil": "–°–≤—è–∑–∞–Ω–Ω–æ–µ –∏—Å–∫–æ–ø–∞–µ–º–æ–µ",
      "Jagged Fossil": "–ó–∞–∑—É–±—Ä–µ–Ω–Ω–æ–µ –∏—Å–∫–æ–ø–∞–µ–º–æ–µ",
      "Dense Fossil": "–ü–ª–æ—Ç–Ω–æ–µ –∏—Å–∫–æ–ø–∞–µ–º–æ–µ",
      "Aberrant Fossil": "–ò—Å–∫–∞–∂–µ–Ω–Ω–æ–µ –∏—Å–∫–æ–ø–∞–µ–º–æ–µ",
      "Pristine Fossil": "–ü–µ—Ä–≤–æ–∑–¥–∞–Ω–Ω–æ–µ –∏—Å–∫–æ–ø–∞–µ–º–æ–µ",
      "Metallic Fossil": "–ú–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–æ–µ –∏—Å–∫–æ–ø–∞–µ–º–æ–µ",
      "Serrated Fossil": "–ó–∞–∑—É–±—Ä–µ–Ω–Ω–æ–µ –∏—Å–∫–æ–ø–∞–µ–º–æ–µ",
      "Aetheric Fossil": "–≠—Ñ–∏—Ä–Ω–æ–µ –∏—Å–∫–æ–ø–∞–µ–º–æ–µ",
      "Frigid Fossil": "–ú–µ—Ä–∑–ª–æ–µ –∏—Å–∫–æ–ø–∞–µ–º–æ–µ",
      "Prismatic Fossil": "–ü—Ä–∏–∑–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–∫–æ–ø–∞–µ–º–æ–µ",
      "Scorched Fossil": "–û–ø–∞–ª–µ–Ω–Ω–æ–µ –∏—Å–∫–æ–ø–∞–µ–º–æ–µ",
      "Deft Fossil": "–õ–æ–≤–∫–æ–µ –∏—Å–∫–æ–ø–∞–µ–º–æ–µ",
      "Fundamental Fossil": "–§—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –∏—Å–∫–æ–ø–∞–µ–º–æ–µ",
      "Lucent Fossil": "–°–≤–µ—Ç—è—â–µ–µ—Å—è –∏—Å–∫–æ–ø–∞–µ–º–æ–µ",
      "Perfect Fossil": "–ò–¥–µ–∞–ª—å–Ω–æ–µ –∏—Å–∫–æ–ø–∞–µ–º–æ–µ",
      "Corroded Fossil": "–†–∞–∑—ä–µ–¥–µ–Ω–Ω–æ–µ –∏—Å–∫–æ–ø–∞–µ–º–æ–µ",
      "Gilded Fossil": "–ü–æ–∑–æ–ª–æ—á–µ–Ω–Ω–æ–µ –∏—Å–∫–æ–ø–∞–µ–º–æ–µ",
      "Encrusted Fossil": "–ò–Ω–∫—Ä—É—Å—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏—Å–∫–æ–ø–∞–µ–º–æ–µ",
      "Sanctified Fossil": "–û—Å–≤—è—â–µ–Ω–Ω–æ–µ –∏—Å–∫–æ–ø–∞–µ–º–æ–µ",
      "Tangled Fossil": "–ó–∞–ø—É—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–æ–ø–∞–µ–º–æ–µ",
      "Glyphic Fossil": "–ì–ª–∏—Ñ–∏—á–µ—Å–∫–æ–µ –∏—Å–∫–æ–ø–∞–µ–º–æ–µ",
      "Volatile Fossil": "–ò–∑–º–µ–Ω—á–∏–≤–æ–µ –∏—Å–∫–æ–ø–∞–µ–º–æ–µ",
      "Shuddering Fossil": "–î—Ä–æ–∂–∞—â–µ–µ –∏—Å–∫–æ–ø–∞–µ–º–æ–µ",
      "Bloodstained Fossil": "–û–∫—Ä–æ–≤–∞–≤–ª–µ–Ω–Ω–æ–µ –∏—Å–∫–æ–ø–∞–µ–º–æ–µ",
      "Fractured Fossil": "–†–∞—Å–∫–æ–ª–æ—Ç–æ–µ –∏—Å–∫–æ–ø–∞–µ–º–æ–µ"
    };
    // ---------------------------------------------------
    
    this.init();
  }
  
  async init() {
    await this.loadLeagues();
    await this.loadFossilData();
    
    document.getElementById('leagueSelect').addEventListener('change', () => this.loadFossilData());
    document.getElementById('refreshBtn').addEventListener('click', () => this.loadFossilData());
  }
  
  async loadLeagues() {
    const endpoints = [
      'https://poe.ninja/api/data/getindexstate',
      'https://www.poe.ninja/api/data/getindexstate',
      'https://api.allorigins.win/raw?url=https://poe.ninja/api/data/getindexstate',
      'https://api.codetabs.com/v1/proxy?quest=https://poe.ninja/api/data/getindexstate'
    ];
    
    for (const endpoint of endpoints) {
      try {
        const response = await fetch(endpoint, { 
          cache: 'no-store',
          headers: {
            'Accept': 'application/json'
          }
        });
        
        if (!response.ok) continue;
        
        const data = await response.json();
        const leagues = data.economyLeagues || [];
        
        if (leagues.length > 0) {
          const select = document.getElementById('leagueSelect');
          select.innerHTML = '';
          
          leagues.forEach(league => {
            if (!league.match(/ruthless/i)) {
              const option = document.createElement('option');
              option.value = league;
              option.textContent = league;
              select.appendChild(option);
            }
          });
          
          const currentLeague = leagues.find(l => !l.toLowerCase().includes('hardcore')) || leagues[0];
          if (currentLeague) {
            select.value = currentLeague;
          }
          return;
        }
      } catch (error) {
        console.warn(`Failed to load leagues from ${endpoint}:`, error);
        continue;
      }
    }
    
    const select = document.getElementById('leagueSelect');
    select.innerHTML = '<option value="Mercenaries">Mercenaries</option><option value="Hardcore Mercenaries">Hardcore Mercenaries</option>';
  }
  
  async loadFossilData() {
    const tbody = document.getElementById('fossilTableBody');
    const lastUpdated = document.getElementById('lastUpdated');
    
    tbody.innerHTML = '<tr><td colspan="5"><div class="progress-container">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å poe.ninja<div class="progress-bar"></div></div></td></tr>';
    
    const league = document.getElementById('leagueSelect').value;
    
    const endpoints = [
      `https://poe.ninja/api/data/itemoverview?league=${encodeURIComponent(league)}&type=Fossil`,
      `https://www.poe.ninja/api/data/itemoverview?league=${encodeURIComponent(league)}&type=Fossil`,
      `https://api.allorigins.win/raw?url=${encodeURIComponent(`https://poe.ninja/api/data/itemoverview?league=${league}&type=Fossil`)}`,
      `https://api.codetabs.com/v1/proxy?quest=${encodeURIComponent(`https://poe.ninja/api/data/itemoverview?league=${league}&type=Fossil`)}`
    ];
    
    for (const endpoint of endpoints) {
      try {
        const response = await fetch(endpoint, { 
          cache: 'no-store',
          headers: {
            'Accept': 'application/json'
          }
        });
        
        if (!response.ok) continue;
        
        const data = await response.json();
        
        if (data && data.lines && Array.isArray(data.lines) && data.lines.length > 0) {
          this.renderFossilData(data.lines);
          lastUpdated.textContent = `–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${new Date().toLocaleString('ru-RU')}`;
          return;
        }
      } catch (error) {
        console.warn(`Failed to fetch from ${endpoint}:`, error);
        continue;
      }
    }
    
    tbody.innerHTML = '<tr><td colspan="5" class="text-center status-negative">‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</td></tr>';
  }
  
  renderFossilData(lines) {
    const tbody = document.getElementById('fossilTableBody');
    
    const topFossils = lines
      .filter(item => item.chaosValue > 0)
      .sort((a, b) => b.chaosValue - a.chaosValue)
      .slice(0, 5);
    
    if (topFossils.length === 0) {
      tbody.innerHTML = '<tr><td colspan="5" class="text-center status-neutral">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ª–∏–≥–∏</td></tr>';
      return;
    }
    
    const html = topFossils.map((fossil, index) => {
      const change = fossil.sparkline?.totalChange || 0;
      const changeClass = change > 3 ? 'status-positive' : change < -3 ? 'status-negative' : 'status-neutral';
      const changeText = change > 0 ? `+${change.toFixed(1)}%` : `${change.toFixed(1)}%`;
      
      const biome = this.FOSSIL_BIOME_RU[fossil.name] || '‚Äî';
      const sparklineSvg = this.generateSparkline(fossil.sparkline?.data);
      
      const rankNumber = index + 1;
      
      // --- –ò–ó–ú–ï–ù–ï–ù–ê –°–¢–†–û–ö–ê –î–õ–Ø –í–´–í–û–î–ê –ù–ê–ó–í–ê–ù–ò–Ø –ò–°–ö–û–ü–ê–ï–ú–û–ì–û ---
      const fossilNameRu = this.FOSSIL_RU_NAMES[fossil.name] || fossil.name;
      
      return `
        <tr>
          <td class="text-center">
            <div style="display: flex; align-items: center; justify-content: center; gap: 8px;">
              <span style="font-weight: 600; color: var(--text-secondary); font-size: 0.9rem;">${rankNumber}.</span>
              <img src="${fossil.icon}" class="icon" alt="${fossil.name}" onerror="this.style.display='none'">
            </div>
          </td>
          <td class="font-bold">${fossilNameRu}</td>
          <td class="status-positive font-bold">${fossil.chaosValue.toFixed(1)} —Ö–∞–æ—Å</td>
          <td>
            <div style="display: flex; align-items: center; gap: 8px;">
              ${sparklineSvg}
              <span class="${changeClass} font-bold">${changeText}</span>
            </div>
          </td>
          <td>
            <span style="display: inline-block; padding: 4px 8px; border: 1px solid var(--border-secondary); border-radius: 16px; font-size: 0.75rem; color: var(--text-secondary); background: rgba(255,255,255,0.05); white-space: nowrap;">
              ${biome}
            </span>
          </td>
        </tr>
      `;
    }).join('');
    
    tbody.innerHTML = html;
  }

  generateSparkline(data) {
    if (!data || data.length === 0) return '';
    
    const filteredData = data.filter(d => d !== null);
    if (filteredData.length < 2) return '';

    const width = 60;
    const height = 30;
    const padding = 2;
    const max = Math.max(...filteredData);
    const min = Math.min(...filteredData);
    const range = max - min;
    
    if (range === 0) return '';
    
    const points = filteredData.map((d, i) => {
      const x = i / (filteredData.length - 1) * (width - padding * 2) + padding;
      const y = (1 - (d - min) / range) * (height - padding * 2) + padding;
      return `${x.toFixed(1)},${y.toFixed(1)}`;
    }).join(' ');

    const lastPoint = points.split(' ').pop().split(',');
    const trend = filteredData[filteredData.length - 1] > filteredData[0] ? 'up' : 'down';
    const strokeColor = trend === 'up' ? 'var(--accent-green)' : 'var(--accent-red)';

    return `
      <div class="sparkline">
        <svg width="${width}" height="${height}">
          <polyline points="${points}" style="fill: none; stroke: ${strokeColor}; stroke-width: 1.5;" />
          <circle cx="${lastPoint[0]}" cy="${lastPoint[1]}" r="2" style="fill: ${strokeColor}; stroke: none;" />
        </svg>
      </div>
    `;
  }
}

// Initialize application
document.addEventListener('DOMContentLoaded', () => {
  new ResonatorCalculator();
  new FossilMarket();
});
